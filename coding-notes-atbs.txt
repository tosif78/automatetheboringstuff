


https://developer.cisco.com/video/net-prog-basics/

https://learningnetwork.cisco.com/community/learning_center/python-programming-training-videos


===================

https://automatetheboringstuff.com/


https://automatetheboringstuff.com/appendixc/


git remote add origin https://github.com/user/repo.git
git remote add origin https://github.com/tosif78/automatetheboringstuff.git
https://github.com/tosif78/automatetheboringstuff.git

# How to use Git inside of VSCode
https://www.youtube.com/watch?v=VOwyH2-VCVY



#  BUILD AND DEPLOY IN SECONDS - online editor
https://repl.it/

===================

https://confluence.***/display/COMMUNITY/Hackathon+Workshops

Derived from hourofcode.org

Good tutorials include:

https://studio.code.org/s/mc/stage/1/puzzle/1
Supplemental article & video

Bloomberg Article: What is Code
Bloomberg: What is Code (video)


===================


sudo chown -R tahmad:admin /usr/local

brew install python3


===================

$ python3 -m venv ~/.pyenv/venv
$ source ~/.pyenv/venv/bin/activate
(venv) $ deactivate

===================


Course Online guide (Week1 and Week2)
O'reilly Learning Path: Python: Guide to Become a Python Professional
https://www.safaribooksonline.com/learning-paths/learning-path-python/9781788623452/
This path navigates across the following products (in sequential order):
1. Modern Python Solutions Part 1 (5h 4m)
2. Modern Python Solutions ­ Part 2 (5h 55m)
3. Modern Python Solutions ­ Part 3 (3h 24m)
4. Mastering Python ­ Second Edition (5h 21m)


https://www.safaribooksonline.com/learning-paths/learning-path-python/9781788623452/

===============

This server could not prove that it is 52.46.132.230; its security certificate is from sns.us-east-1.amazonaws.com. This may be caused by a misconfiguration or an attacker intercepting your connection.


=================

flake8

/Users/tahmad/.pyenv/venv/lib/python3.7/site-packages


=============







str(), int(), and float()

# input() value always returns a string, so to convert to interger,
# then can do  spam = int(spam)  to make it a # that can be used.
# int() can also be used to round.

https://docs.python.org/3/library/functions.html

round(35.3347, 2)

Operator / Meaning
==  /  Equal to
!=  /  Not equal to


The 'and' Operator’s Truth Table.
True and True  =  True
True and False = False
False and True  = False
False and False = False

The 'or' Operator’s Truth Table
True or True = True
True or False = True
False or True = True
False or False = False

The 'not' Operator’s Truth Table
not True = False
not False = True



A flow control statement decides what to do based on whether its condition is True or False, and almost every flow control statement uses a condition.

All flow control statements end with a colon and are followed by a new block of code (the clause)

The elif statement is an “else if” statement that always follows an if or another elif statement. It provides another condition that is checked only if all of the previous conditions were False
When there is a chain of elif statements, only one or none of the clauses will be executed. Once one of the statements’ conditions is found to be True, the rest of the elif clauses are automatically skipped
Remember, at most only one of the clauses will be executed, and for elif statements, the order matters!

The code in a while clause will be executed as long as the while statement’s condition is True
The while clause is often called the while loop or just the loop.
If the execution reaches a break statement, it immediately exits the while loop’s clause

"while True:" creates an infinte loop; it is a while loop whose condition is always True.
 will exit it only when a break statement is executed
 (An infinite loop that never exits is a common programming bug.)

 Like break statements, continue statements are used inside loops
 When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop and reevaluates the loop’s condition

if want to run a block code only a certain number of times, 
 can do a for loop statement and the range() functions
can use break and continue statements inside for loops as well. The continue statement will continue to the next value of the for loop’s counter, as if the program execution had reached the end of the loop and returned to the start

range() can be called with multiple arguments seperated by comma  EXAMPLE  range(12, 16)
The first argument will be where the for loop’s variable starts, and the second argument will be up to, but not including, the number to stop at.
If 3 arguments, then 1st 2 are range and 3rd is the step argument.
  EX: range(0, 10, 2):




Before you can use the functions in a module, you must import the module with an import statement
example - 
import module random
print(random.randint(1, 10))

can also import with from statement "from random import *"
then dont need to use the prefix of the module

sys.exit() is way to end program. uses module sys



comparison operators ---->  ==, !=, <, >, <=, and >=.

Press CTRL-C to stop a program stuck in an infinite loop.

The break statement will move the execution outside and just after a loop. The continue statement will move the execution to the start of the loop


--------chapter 3

Functions - can create our own functions with the 'def' statment, then code in block.

As you get more programming experience, you’ll often find yourself deduplicating code, which means getting rid of duplicated or copy-and-pasted code. Deduplication makes your programs shorter, easier to read, and easier to update.

hello(name)  <-- hello() is function.  name is paramater, a variable that an argument is stored in when a function is called.

the value that a function call evaluates to is called the return value of the function.
When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:
can pass return values as an argument to another function call

None, which represents the absence of a value. None is the only value of the NoneType data type

all function calls need to evaluate to a return value, print() returns None.
Python adds return None to the end of any function definition with no return statement. This is similar to how a while or for loop implicitly ends with a continue statement. Also, if you use a return statement without a value (that is, just the return keyword by itself), then None is returned.

keyword arguments are identified by the keyword put before them in the function call. Keyword arguments are often used for optional parameters

by default print() adds a new line character to the end of the string,
 but can set "end" keyword argument to change this. 
 also by default add a space between multiple string values, 
 but can change that with keyword argument "sep"

EX: print('Hello', end='')
    print('World')
    print('cats', 'dogs', 'mice', sep=',')


Parameters and variables that are assigned in a called function are said to exist in that function’s local scope. 
  local variable
Variables that are assigned outside all functions are said to exist in the global scope
  global variable. 
A variable must be one or the other; it cannot be both local and global

When the function returns, the local scope is destroyed, and these variables are forgotten. The next time you call this function, the local variables will not remember the values stored in them from the last time the function was called.
You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.

four rules to tell whether a variable is in a local scope or global scope:
 -If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.
 -If there is a global statement for that variable in a function, it is a global variable.
 -Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.
 -But if the variable is not used in an assignment statement, it is a global variable.


When code in a "try" clause causes an error, the program execution immediately moves to the code in the "except" clause. After running that code, the execution continues as normal.

A Short Program: Guess the Number

A return value is the value that a function call evaluates to. Like any value, a return value can be used as part of an expression.
If there is no return statement for a function, its return value is None.
A global statement will force a variable in a function to refer to the global variable.
To prevent a program from crashing when it gets an error, place the line of code that might cause an error in a try clause.


--------chapter 4

A 'list' is a value that contains multiple values in an ordered sequence
Values inside the list are also called items. marked by brackets []

The integer inside the square brackets that follows the list is called an index
The first value in the list is at index 0

Indexes can be only integer values, not floats

Lists can also contain other list values
  spam = [['cat', 'bat'], [10, 20, 30, 40, 50]]
  spam[0][1]

The integer value -1 refers to the last index in a list

A slice makes a new list from several values in existing list, first integar is where it starts, 2nd integar is when slice ends, but does not include the value at the 2nd index.

len() function will return the number of values in a list.

+ operator combines 2 lists to a new list.
* operator will replicate the list.

'del' to remove values at an index in a list.


For loops with range to work through list - 
EX: >>> for i in range(len(supplies)): << range(len(supplies)) will iterate through all the indexes of supplies, no matter how many items it contains

'in' and 'not in' operators to determine itf value is or isnt in a list
-evaluates to a Bollean value.

multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code

The number of variables and the length of the list must be exactly equal, or Python will give you a ValueError:


can use the augmented assignment operator += to add to value of existing variable.
EX:  spam += 1     spam = spam + 1
     spam -= 1     spam = spam - 1
     spam *= 1     spam = spam * 1
     spam /= 1     spam = spam / 1
     spam %= 1     spam = spam % 1
The += operator can also do string and list concatenation, 
the *= operator can do string and list replication


A method is the same thing as a function, except it is “called on” a value.
List values have an index() method that can be passed a value, and if that value exists in the list, the index of the value is returned (its position). If the value isn’t in the list, then Python produces a ValueError error.

To add new values to a list, use the append() and insert() methods
append() method call adds the argument to the end of the list
The insert() method can insert a value at any index in the list - spam.insert(1, 'chicken')
the list is modified in place. (the return value of append() and insert() is None)

The remove() method is passed the value to be removed from the list it is called on
If the value appears multiple times in the list, only the first instance of the value will be removed

Lists of number values or lists of strings can be sorted with the sort() method
  EX: spam.sort()
-can also pass True for the reverse keyword argument to have sort() sort the values in reverse order.  
  EX: spam.sort(reverse=True)
-you cannot sort lists that have both number values and string values in them, since Python doesn’t know how to compare these values.
-sort() uses “ASCIIbetical order” rather than actual alphabetical order for sorting strings. This means uppercase letters come before lowercase letters
  the lowercase a is sorted so that it comes after the uppercase Z
-to sort the values in regular alphabetical order, pass str. lower for the key keyword argument in the sort() method call
  EX:  spam.sort(key=str.lower)


Indentations in lists can span several lines in the source code.
Python know that until it sees the ending square bracker, list is not finsihed.

Can also use the "\" line continuation character to split up a single instruction acrosee multiple lines.
  EX: print('Four score and seven ' + \
      'years ago...')

Can consider a string to be a “list” of single text characters. Can do indexing; slicing; and using them with for loops, with len(), and with the in and not in operators  with strings as with lists
  EX:  >>>name = 'Zophie'
       >>>name[-2]
        'i'

A list value is a mutable data type: It can have values added, removed, or changed. 
However, a string is immutable: It cannot be changed.

Can 'mutate' a string by using slicing and concatenation to build new string by copying from part of old string.


Tuple data type is almost identical to the list data type, 
 but it is typed with parentheses ( )
 tuples are immutable - Tuples cannot have their values modified, appended, or removed. 
  EX:  >>> eggs = ('hello', 42, 0.5)
  If you need an ordered sequence of values that never changes, use a tuple

can convert list to tuple via tuple() function, passing the list as a parameter


When you assign a list to a variable, you are actually assigning a list reference to the variable. 
A reference is a value that points to some bit of data, and a list reference is a value that points to a list
  There is only one underlying list because the list itself was never actually copied
Variables will contain references to list values rather than list values themselves

Variables do not store list values directly; they store references to lists.

For values of immutable data types such as strings, integers, or tuples, Python variables will store the value itself

Module  copy.copy(), can be used to make a duplicate copy of a mutable value like a list or dictionary, not just a copy of a reference
If the list you need to copy contains lists, then use the copy.deepcopy() function instead of copy.copy(). The deepcopy() function will copy these inner lists as well




--------chapter 5

dictionary is a collection of many values
But unlike indexes for lists, indexes for dictionaries can use many different data types, not just integers. 
Indexes for dictionaries are called keys, and a key with its associated value is called a key-value pair.

In code, a dictionary is typed with braces, {}

Unlike lists, items in dictionaries are unordered
there is no “first” item in a dictionary.

items stored in a dictionary are unordered, while the items in a list are ordered.

dictionaries can be determined to be the same ( via == ) even if they key-value pairs are typed in different order.

dictionary methods that will return list-like values of the dictionary’s keys, values, or both keys and values: keys(), values(), and items(). 
The values returned by these methods are not true lists: They cannot be modified and do not have an append() method. 
But these data types (dict_keys, dict_values, and dict_items, respectively) can be used in for loops. 

can use the 'in' and 'not in' operators to see whether a certain key or value exists in a dictionary
If you ever want to check whether a value is (or isn’t) a key in the dictionary, you can simply use the in (or not in) keyword with the dictionary value itself.
  EX: 'cat' in spam.keys()  same as 'cat' in spam - checks if 'cat' is a key in dictionary.
      'cat' in spam.value() checks whether there is a value 'cat' for one of the keys in spam.

get() method that takes two arguments: the key of the value to retrieve and a fallback value to return if that key does not exist.

setdefault() method set a value in a dictionary for a certain key only if that key does not already have a value. if it exits, it just returns the value


pprint() and pformat() functions that will “pretty print” a dictionary’s values
 pprint.pprint() function will print dictionary on screen
 pprint.pformat() will result as a string value instead of displaying it on the screen

 

--------chapter 6










































